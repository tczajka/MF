(**
 * Core rules of logic.
 *
 * Inspired by HOL Light.
 *
 * @author Tomek Czajka, 2017
 *)

(**
 * A "definition" of a built-in type constructors.
 *)
type type_constructor_builtin_definition

(**
 * A "definition" of a built-in constant.
 *)
type constant_builtin_definition

(**
 * A higher order logic type.
 *
 * For example, "a -> bool" is a polymorphic type with a type functor "->"
 * applied to the type variable "a" and the type constant "bool".
 *
 * The names here are only relevant for pretty-printing and parsing.
 *)
type hol_type =
  | TypeVariable of Names.name
    (** A type variable. *)
  | TypeApplication of type_constructor * hol_type list

and

(**
 * Type constructor.
 *
 * "bool" is a type constructor with 0 arguments.
 * "->" is a type constructor with 2 arguments.
 *
 * The definition is included here so that we can compare types.
 * Types with different definitions compare unequal even if they have the same name.
 *)
type_constructor = Names.name * int (* arity *) * type_constructor_definition

and

(**
 * The definition of the type constructor.
 *)
type_constructor_definition =
  | TypeConstructorBuiltinDefinition of type_constructor_builtin_definition
    (**
     * A built-in type constructor.
     *)
  | TypeConstructorPredicateDefinition of term
    (**
     * Defined via a predicate.
     *)

and

(**
 * Constant.
 *
 * The definition is included here so that we can compare constants.
 * Constants with different definitions compare unequal even if the have the same name.
 *)
constant = name * hol_type * constant_definition

and

constant_definition =
  | ConstantBuiltinDefinition of constant_builtin_definition
    (**
     * A built-in constant.
     *)
  | ConstantTermDefinition of term
    (**
     * Defined via a term.
     *)

and

(**
 * Term.
 *
 * E.g. "x + y" or "3 < 4".
 *)
term =
  | TermVariable of name * hol_type
    (** A variable, e.g. "p : bool". *)
  | TermConstant of constant
    (** A constant, e.g. "true : bool" or "(+) : natural -> natural -> natural" *)
  | TermApplication of term * term
    (** Function application, e.g. "f x". *)
  | TermAbstraction of name * term
    (** Function abstruction, e.g. "fun x . x + 1". *)

(**
 * Theorem.
 *
 * This is the central type of the proof system.
 *
 * Theorems can only be generated by applying inferrence rules in this module.
 *)
type theorem
